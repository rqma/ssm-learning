<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.rqma.mybatis.f_dynamic_sql.mapper.UserMapper">
    <!-- 定义sql片段
        id：sql片段的唯 一标识

        经验：是基于单表来定义sql片段，这样话这个sql片段可重用性才高
        在sql片段中不要包括 where
         -->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex!=null and userCustom.sex!=''">
                AND user.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                AND user.username LIKE '%${userCustom.username}%'
            </if>

        </if>
        <if test="ids!=null">
            <!-- 使用 foreach遍历传入ids
               collection：指定输入 对象中集合属性
               item：每个遍历生成对象中
               open：开始遍历时拼接的串
               close：结束遍历时拼接的串
               separator：遍历的两个对象中需要拼接的串
                -->
            <!-- 使用实现下边的sql拼接：
             AND (id=1 OR id=10 OR id=16)
             -->
            <foreach collection="ids" open="and (" close=")" item="user_id" separator="or">
                id=#{user_id}
            </foreach>
            <!-- 实现  “ and id IN(1,10,16)”拼接 -->
            <!-- <foreach collection="ids" item="user_id" open="and id IN(" close=")" separator=",">
                每个遍历需要拼接的串
                #{user_id}
            </foreach> -->
        </if>
    </sql>

    <select id="findUserList" parameterType="com.rqma.mybatis.f_dynamic_sql.po.UserQueryVo" resultType="com.rqma.mybatis.f_dynamic_sql.po.UserQueryVo">
        SELECT * FROM user
        <!--  where 可以自动去掉条件中的第一个and -->
        <where>
            <!-- 引用sql片段 的id，如果refid指定的id不在本mapper文件中，需要前边加namespace -->
            <include refid="query_user_where"></include>
            <!-- 在这里还要引用其它的sql片段  -->
        </where>
    </select>

    <select id="findUserCount" parameterType="com.rqma.mybatis.f_dynamic_sql.po.UserQueryVo" resultType="int">
        SELECT count(*) FROM user
    </select>

    <!-- 定义resultMap
   将SELECT id id_,username username_ FROM USER 和User类中的属性作一个映射关系

   type：resultMap最终映射的java对象类型,可以使用别名
   id：对resultMap的唯一标识
    -->
    <resultMap id="userResultMap" type="com.rqma.mybatis.f_dynamic_sql.po.User">
        <!-- id表示查询结果集中唯一标识
       column：查询出来的列名
       property：type指定的pojo类型中的属性名
       最终resultMap对column和property作一个映射关系 （对应关系）
       -->
        <id column="id_" property="id"/>
        <!--
       result：对普通名映射定义
       column：查询出来的列名
       property：type指定的pojo类型中的属性名
       最终resultMap对column和property作一个映射关系 （对应关系）
        -->
        <result column="username_" property="username"/>
    </resultMap>

    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT id id_,username username_ FROM user WHERE id=#{value}
    </select>

</mapper>